
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Book
 * 
 */
export type Book = $Result.DefaultSelection<Prisma.$BookPayload>
/**
 * Model UserFavoriteBook
 * 
 */
export type UserFavoriteBook = $Result.DefaultSelection<Prisma.$UserFavoriteBookPayload>
/**
 * Model UserRateBook
 * 
 */
export type UserRateBook = $Result.DefaultSelection<Prisma.$UserRateBookPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<ExtArgs>;

  /**
   * `prisma.userFavoriteBook`: Exposes CRUD operations for the **UserFavoriteBook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFavoriteBooks
    * const userFavoriteBooks = await prisma.userFavoriteBook.findMany()
    * ```
    */
  get userFavoriteBook(): Prisma.UserFavoriteBookDelegate<ExtArgs>;

  /**
   * `prisma.userRateBook`: Exposes CRUD operations for the **UserRateBook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRateBooks
    * const userRateBooks = await prisma.userRateBook.findMany()
    * ```
    */
  get userRateBook(): Prisma.UserRateBookDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Book: 'Book',
    UserFavoriteBook: 'UserFavoriteBook',
    UserRateBook: 'UserRateBook',
    Comment: 'Comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "book" | "userFavoriteBook" | "userRateBook" | "comment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Book: {
        payload: Prisma.$BookPayload<ExtArgs>
        fields: Prisma.BookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findFirst: {
            args: Prisma.BookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findMany: {
            args: Prisma.BookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          create: {
            args: Prisma.BookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          createMany: {
            args: Prisma.BookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          update: {
            args: Prisma.BookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          deleteMany: {
            args: Prisma.BookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          aggregate: {
            args: Prisma.BookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBook>
          }
          groupBy: {
            args: Prisma.BookGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookCountArgs<ExtArgs>
            result: $Utils.Optional<BookCountAggregateOutputType> | number
          }
        }
      }
      UserFavoriteBook: {
        payload: Prisma.$UserFavoriteBookPayload<ExtArgs>
        fields: Prisma.UserFavoriteBookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFavoriteBookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFavoriteBookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          findFirst: {
            args: Prisma.UserFavoriteBookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFavoriteBookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          findMany: {
            args: Prisma.UserFavoriteBookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>[]
          }
          create: {
            args: Prisma.UserFavoriteBookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          createMany: {
            args: Prisma.UserFavoriteBookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserFavoriteBookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          update: {
            args: Prisma.UserFavoriteBookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          deleteMany: {
            args: Prisma.UserFavoriteBookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFavoriteBookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserFavoriteBookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoriteBookPayload>
          }
          aggregate: {
            args: Prisma.UserFavoriteBookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFavoriteBook>
          }
          groupBy: {
            args: Prisma.UserFavoriteBookGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFavoriteBookGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFavoriteBookCountArgs<ExtArgs>
            result: $Utils.Optional<UserFavoriteBookCountAggregateOutputType> | number
          }
        }
      }
      UserRateBook: {
        payload: Prisma.$UserRateBookPayload<ExtArgs>
        fields: Prisma.UserRateBookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRateBookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRateBookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          findFirst: {
            args: Prisma.UserRateBookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRateBookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          findMany: {
            args: Prisma.UserRateBookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>[]
          }
          create: {
            args: Prisma.UserRateBookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          createMany: {
            args: Prisma.UserRateBookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserRateBookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          update: {
            args: Prisma.UserRateBookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          deleteMany: {
            args: Prisma.UserRateBookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRateBookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRateBookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRateBookPayload>
          }
          aggregate: {
            args: Prisma.UserRateBookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRateBook>
          }
          groupBy: {
            args: Prisma.UserRateBookGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRateBookGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRateBookCountArgs<ExtArgs>
            result: $Utils.Optional<UserRateBookCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    favoriteBooks: number
    bookRatings: number
    comments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBooks?: boolean | UserCountOutputTypeCountFavoriteBooksArgs
    bookRatings?: boolean | UserCountOutputTypeCountBookRatingsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoriteBookWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRateBookWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type BookCountOutputType
   */

  export type BookCountOutputType = {
    userFavorites: number
    userRatings: number
    comments: number
  }

  export type BookCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFavorites?: boolean | BookCountOutputTypeCountUserFavoritesArgs
    userRatings?: boolean | BookCountOutputTypeCountUserRatingsArgs
    comments?: boolean | BookCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookCountOutputType
     */
    select?: BookCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountUserFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoriteBookWhereInput
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountUserRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRateBookWhereInput
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    displayName: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    displayName: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    displayName: number
    firstName: number
    lastName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    displayName: string
    firstName: string | null
    lastName: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    favoriteBooks?: boolean | User$favoriteBooksArgs<ExtArgs>
    bookRatings?: boolean | User$bookRatingsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBooks?: boolean | User$favoriteBooksArgs<ExtArgs>
    bookRatings?: boolean | User$bookRatingsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      favoriteBooks: Prisma.$UserFavoriteBookPayload<ExtArgs>[]
      bookRatings: Prisma.$UserRateBookPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      displayName: string
      firstName: string | null
      lastName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favoriteBooks<T extends User$favoriteBooksArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteBooksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findMany"> | Null>
    bookRatings<T extends User$bookRatingsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.favoriteBooks
   */
  export type User$favoriteBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    where?: UserFavoriteBookWhereInput
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    cursor?: UserFavoriteBookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFavoriteBookScalarFieldEnum | UserFavoriteBookScalarFieldEnum[]
  }

  /**
   * User.bookRatings
   */
  export type User$bookRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    where?: UserRateBookWhereInput
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    cursor?: UserRateBookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRateBookScalarFieldEnum | UserRateBookScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Book
   */

  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    ratedAverage: number | null
  }

  export type BookSumAggregateOutputType = {
    id: number | null
    ratedAverage: number | null
  }

  export type BookMinAggregateOutputType = {
    id: number | null
    googleBooksId: string | null
    name: string | null
    author: string | null
    cover: Buffer | null
    overview: string | null
    releasedDate: Date | null
    ratedAverage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: number | null
    googleBooksId: string | null
    name: string | null
    author: string | null
    cover: Buffer | null
    overview: string | null
    releasedDate: Date | null
    ratedAverage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    googleBooksId: number
    name: number
    author: number
    cover: number
    overview: number
    releasedDate: number
    ratedAverage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    ratedAverage?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    ratedAverage?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    googleBooksId?: true
    name?: true
    author?: true
    cover?: true
    overview?: true
    releasedDate?: true
    ratedAverage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    googleBooksId?: true
    name?: true
    author?: true
    cover?: true
    overview?: true
    releasedDate?: true
    ratedAverage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    googleBooksId?: true
    name?: true
    author?: true
    cover?: true
    overview?: true
    releasedDate?: true
    ratedAverage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Book to aggregate.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
    orderBy?: BookOrderByWithAggregationInput | BookOrderByWithAggregationInput[]
    by: BookScalarFieldEnum[] | BookScalarFieldEnum
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }

  export type BookGroupByOutputType = {
    id: number
    googleBooksId: string | null
    name: string
    author: string
    cover: Buffer | null
    overview: string | null
    releasedDate: Date | null
    ratedAverage: number | null
    createdAt: Date
    updatedAt: Date
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    googleBooksId?: boolean
    name?: boolean
    author?: boolean
    cover?: boolean
    overview?: boolean
    releasedDate?: boolean
    ratedAverage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userFavorites?: boolean | Book$userFavoritesArgs<ExtArgs>
    userRatings?: boolean | Book$userRatingsArgs<ExtArgs>
    comments?: boolean | Book$commentsArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>


  export type BookSelectScalar = {
    id?: boolean
    googleBooksId?: boolean
    name?: boolean
    author?: boolean
    cover?: boolean
    overview?: boolean
    releasedDate?: boolean
    ratedAverage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFavorites?: boolean | Book$userFavoritesArgs<ExtArgs>
    userRatings?: boolean | Book$userRatingsArgs<ExtArgs>
    comments?: boolean | Book$commentsArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Book"
    objects: {
      userFavorites: Prisma.$UserFavoriteBookPayload<ExtArgs>[]
      userRatings: Prisma.$UserRateBookPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      googleBooksId: string | null
      name: string
      author: string
      cover: Buffer | null
      overview: string | null
      releasedDate: Date | null
      ratedAverage: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["book"]>
    composites: {}
  }

  type BookGetPayload<S extends boolean | null | undefined | BookDefaultArgs> = $Result.GetResult<Prisma.$BookPayload, S>

  type BookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookCountAggregateInputType | true
    }

  export interface BookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Book'], meta: { name: 'Book' } }
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookFindUniqueArgs>(args: SelectSubset<T, BookFindUniqueArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Book that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(args: SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookFindFirstArgs>(args?: SelectSubset<T, BookFindFirstArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Book that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(args?: SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookFindManyArgs>(args?: SelectSubset<T, BookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
     */
    create<T extends BookCreateArgs>(args: SelectSubset<T, BookCreateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Books.
     * @param {BookCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookCreateManyArgs>(args?: SelectSubset<T, BookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
     */
    delete<T extends BookDeleteArgs>(args: SelectSubset<T, BookDeleteArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookUpdateArgs>(args: SelectSubset<T, BookUpdateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookDeleteManyArgs>(args?: SelectSubset<T, BookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookUpdateManyArgs>(args: SelectSubset<T, BookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
     */
    upsert<T extends BookUpsertArgs>(args: SelectSubset<T, BookUpsertArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userFavorites<T extends Book$userFavoritesArgs<ExtArgs> = {}>(args?: Subset<T, Book$userFavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findMany"> | Null>
    userRatings<T extends Book$userRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Book$userRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Book$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Book$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Book model
   */ 
  interface BookFieldRefs {
    readonly id: FieldRef<"Book", 'Int'>
    readonly googleBooksId: FieldRef<"Book", 'String'>
    readonly name: FieldRef<"Book", 'String'>
    readonly author: FieldRef<"Book", 'String'>
    readonly cover: FieldRef<"Book", 'Bytes'>
    readonly overview: FieldRef<"Book", 'String'>
    readonly releasedDate: FieldRef<"Book", 'DateTime'>
    readonly ratedAverage: FieldRef<"Book", 'Float'>
    readonly createdAt: FieldRef<"Book", 'DateTime'>
    readonly updatedAt: FieldRef<"Book", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findFirst
   */
  export type BookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findMany
   */
  export type BookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book create
   */
  export type BookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to create a Book.
     */
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }

  /**
   * Book createMany
   */
  export type BookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Book update
   */
  export type BookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to update a Book.
     */
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
  }

  /**
   * Book upsert
   */
  export type BookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The filter to search for the Book to update in case it exists.
     */
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     */
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }

  /**
   * Book delete
   */
  export type BookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter which Book to delete.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BookWhereInput
  }

  /**
   * Book.userFavorites
   */
  export type Book$userFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    where?: UserFavoriteBookWhereInput
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    cursor?: UserFavoriteBookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFavoriteBookScalarFieldEnum | UserFavoriteBookScalarFieldEnum[]
  }

  /**
   * Book.userRatings
   */
  export type Book$userRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    where?: UserRateBookWhereInput
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    cursor?: UserRateBookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRateBookScalarFieldEnum | UserRateBookScalarFieldEnum[]
  }

  /**
   * Book.comments
   */
  export type Book$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Book without action
   */
  export type BookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
  }


  /**
   * Model UserFavoriteBook
   */

  export type AggregateUserFavoriteBook = {
    _count: UserFavoriteBookCountAggregateOutputType | null
    _avg: UserFavoriteBookAvgAggregateOutputType | null
    _sum: UserFavoriteBookSumAggregateOutputType | null
    _min: UserFavoriteBookMinAggregateOutputType | null
    _max: UserFavoriteBookMaxAggregateOutputType | null
  }

  export type UserFavoriteBookAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    bookId: number | null
  }

  export type UserFavoriteBookSumAggregateOutputType = {
    id: number | null
    userId: number | null
    bookId: number | null
  }

  export type UserFavoriteBookMinAggregateOutputType = {
    id: number | null
    likedAt: Date | null
    unlikedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type UserFavoriteBookMaxAggregateOutputType = {
    id: number | null
    likedAt: Date | null
    unlikedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type UserFavoriteBookCountAggregateOutputType = {
    id: number
    likedAt: number
    unlikedAt: number
    userId: number
    bookId: number
    _all: number
  }


  export type UserFavoriteBookAvgAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type UserFavoriteBookSumAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type UserFavoriteBookMinAggregateInputType = {
    id?: true
    likedAt?: true
    unlikedAt?: true
    userId?: true
    bookId?: true
  }

  export type UserFavoriteBookMaxAggregateInputType = {
    id?: true
    likedAt?: true
    unlikedAt?: true
    userId?: true
    bookId?: true
  }

  export type UserFavoriteBookCountAggregateInputType = {
    id?: true
    likedAt?: true
    unlikedAt?: true
    userId?: true
    bookId?: true
    _all?: true
  }

  export type UserFavoriteBookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFavoriteBook to aggregate.
     */
    where?: UserFavoriteBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteBooks to fetch.
     */
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFavoriteBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFavoriteBooks
    **/
    _count?: true | UserFavoriteBookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFavoriteBookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFavoriteBookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFavoriteBookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFavoriteBookMaxAggregateInputType
  }

  export type GetUserFavoriteBookAggregateType<T extends UserFavoriteBookAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFavoriteBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFavoriteBook[P]>
      : GetScalarType<T[P], AggregateUserFavoriteBook[P]>
  }




  export type UserFavoriteBookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoriteBookWhereInput
    orderBy?: UserFavoriteBookOrderByWithAggregationInput | UserFavoriteBookOrderByWithAggregationInput[]
    by: UserFavoriteBookScalarFieldEnum[] | UserFavoriteBookScalarFieldEnum
    having?: UserFavoriteBookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFavoriteBookCountAggregateInputType | true
    _avg?: UserFavoriteBookAvgAggregateInputType
    _sum?: UserFavoriteBookSumAggregateInputType
    _min?: UserFavoriteBookMinAggregateInputType
    _max?: UserFavoriteBookMaxAggregateInputType
  }

  export type UserFavoriteBookGroupByOutputType = {
    id: number
    likedAt: Date
    unlikedAt: Date | null
    userId: number
    bookId: number
    _count: UserFavoriteBookCountAggregateOutputType | null
    _avg: UserFavoriteBookAvgAggregateOutputType | null
    _sum: UserFavoriteBookSumAggregateOutputType | null
    _min: UserFavoriteBookMinAggregateOutputType | null
    _max: UserFavoriteBookMaxAggregateOutputType | null
  }

  type GetUserFavoriteBookGroupByPayload<T extends UserFavoriteBookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFavoriteBookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFavoriteBookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFavoriteBookGroupByOutputType[P]>
            : GetScalarType<T[P], UserFavoriteBookGroupByOutputType[P]>
        }
      >
    >


  export type UserFavoriteBookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likedAt?: boolean
    unlikedAt?: boolean
    userId?: boolean
    bookId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFavoriteBook"]>


  export type UserFavoriteBookSelectScalar = {
    id?: boolean
    likedAt?: boolean
    unlikedAt?: boolean
    userId?: boolean
    bookId?: boolean
  }

  export type UserFavoriteBookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }

  export type $UserFavoriteBookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFavoriteBook"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      likedAt: Date
      unlikedAt: Date | null
      userId: number
      bookId: number
    }, ExtArgs["result"]["userFavoriteBook"]>
    composites: {}
  }

  type UserFavoriteBookGetPayload<S extends boolean | null | undefined | UserFavoriteBookDefaultArgs> = $Result.GetResult<Prisma.$UserFavoriteBookPayload, S>

  type UserFavoriteBookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFavoriteBookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserFavoriteBookCountAggregateInputType | true
    }

  export interface UserFavoriteBookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFavoriteBook'], meta: { name: 'UserFavoriteBook' } }
    /**
     * Find zero or one UserFavoriteBook that matches the filter.
     * @param {UserFavoriteBookFindUniqueArgs} args - Arguments to find a UserFavoriteBook
     * @example
     * // Get one UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFavoriteBookFindUniqueArgs>(args: SelectSubset<T, UserFavoriteBookFindUniqueArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserFavoriteBook that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFavoriteBookFindUniqueOrThrowArgs} args - Arguments to find a UserFavoriteBook
     * @example
     * // Get one UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFavoriteBookFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFavoriteBookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserFavoriteBook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookFindFirstArgs} args - Arguments to find a UserFavoriteBook
     * @example
     * // Get one UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFavoriteBookFindFirstArgs>(args?: SelectSubset<T, UserFavoriteBookFindFirstArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserFavoriteBook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookFindFirstOrThrowArgs} args - Arguments to find a UserFavoriteBook
     * @example
     * // Get one UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFavoriteBookFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFavoriteBookFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserFavoriteBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFavoriteBooks
     * const userFavoriteBooks = await prisma.userFavoriteBook.findMany()
     * 
     * // Get first 10 UserFavoriteBooks
     * const userFavoriteBooks = await prisma.userFavoriteBook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFavoriteBookWithIdOnly = await prisma.userFavoriteBook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFavoriteBookFindManyArgs>(args?: SelectSubset<T, UserFavoriteBookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserFavoriteBook.
     * @param {UserFavoriteBookCreateArgs} args - Arguments to create a UserFavoriteBook.
     * @example
     * // Create one UserFavoriteBook
     * const UserFavoriteBook = await prisma.userFavoriteBook.create({
     *   data: {
     *     // ... data to create a UserFavoriteBook
     *   }
     * })
     * 
     */
    create<T extends UserFavoriteBookCreateArgs>(args: SelectSubset<T, UserFavoriteBookCreateArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserFavoriteBooks.
     * @param {UserFavoriteBookCreateManyArgs} args - Arguments to create many UserFavoriteBooks.
     * @example
     * // Create many UserFavoriteBooks
     * const userFavoriteBook = await prisma.userFavoriteBook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFavoriteBookCreateManyArgs>(args?: SelectSubset<T, UserFavoriteBookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFavoriteBook.
     * @param {UserFavoriteBookDeleteArgs} args - Arguments to delete one UserFavoriteBook.
     * @example
     * // Delete one UserFavoriteBook
     * const UserFavoriteBook = await prisma.userFavoriteBook.delete({
     *   where: {
     *     // ... filter to delete one UserFavoriteBook
     *   }
     * })
     * 
     */
    delete<T extends UserFavoriteBookDeleteArgs>(args: SelectSubset<T, UserFavoriteBookDeleteArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserFavoriteBook.
     * @param {UserFavoriteBookUpdateArgs} args - Arguments to update one UserFavoriteBook.
     * @example
     * // Update one UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFavoriteBookUpdateArgs>(args: SelectSubset<T, UserFavoriteBookUpdateArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserFavoriteBooks.
     * @param {UserFavoriteBookDeleteManyArgs} args - Arguments to filter UserFavoriteBooks to delete.
     * @example
     * // Delete a few UserFavoriteBooks
     * const { count } = await prisma.userFavoriteBook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFavoriteBookDeleteManyArgs>(args?: SelectSubset<T, UserFavoriteBookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFavoriteBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFavoriteBooks
     * const userFavoriteBook = await prisma.userFavoriteBook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFavoriteBookUpdateManyArgs>(args: SelectSubset<T, UserFavoriteBookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFavoriteBook.
     * @param {UserFavoriteBookUpsertArgs} args - Arguments to update or create a UserFavoriteBook.
     * @example
     * // Update or create a UserFavoriteBook
     * const userFavoriteBook = await prisma.userFavoriteBook.upsert({
     *   create: {
     *     // ... data to create a UserFavoriteBook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFavoriteBook we want to update
     *   }
     * })
     */
    upsert<T extends UserFavoriteBookUpsertArgs>(args: SelectSubset<T, UserFavoriteBookUpsertArgs<ExtArgs>>): Prisma__UserFavoriteBookClient<$Result.GetResult<Prisma.$UserFavoriteBookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserFavoriteBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookCountArgs} args - Arguments to filter UserFavoriteBooks to count.
     * @example
     * // Count the number of UserFavoriteBooks
     * const count = await prisma.userFavoriteBook.count({
     *   where: {
     *     // ... the filter for the UserFavoriteBooks we want to count
     *   }
     * })
    **/
    count<T extends UserFavoriteBookCountArgs>(
      args?: Subset<T, UserFavoriteBookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFavoriteBookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFavoriteBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFavoriteBookAggregateArgs>(args: Subset<T, UserFavoriteBookAggregateArgs>): Prisma.PrismaPromise<GetUserFavoriteBookAggregateType<T>>

    /**
     * Group by UserFavoriteBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoriteBookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFavoriteBookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFavoriteBookGroupByArgs['orderBy'] }
        : { orderBy?: UserFavoriteBookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFavoriteBookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFavoriteBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFavoriteBook model
   */
  readonly fields: UserFavoriteBookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFavoriteBook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFavoriteBookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    book<T extends BookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookDefaultArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFavoriteBook model
   */ 
  interface UserFavoriteBookFieldRefs {
    readonly id: FieldRef<"UserFavoriteBook", 'Int'>
    readonly likedAt: FieldRef<"UserFavoriteBook", 'DateTime'>
    readonly unlikedAt: FieldRef<"UserFavoriteBook", 'DateTime'>
    readonly userId: FieldRef<"UserFavoriteBook", 'Int'>
    readonly bookId: FieldRef<"UserFavoriteBook", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserFavoriteBook findUnique
   */
  export type UserFavoriteBookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteBook to fetch.
     */
    where: UserFavoriteBookWhereUniqueInput
  }

  /**
   * UserFavoriteBook findUniqueOrThrow
   */
  export type UserFavoriteBookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteBook to fetch.
     */
    where: UserFavoriteBookWhereUniqueInput
  }

  /**
   * UserFavoriteBook findFirst
   */
  export type UserFavoriteBookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteBook to fetch.
     */
    where?: UserFavoriteBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteBooks to fetch.
     */
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFavoriteBooks.
     */
    cursor?: UserFavoriteBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFavoriteBooks.
     */
    distinct?: UserFavoriteBookScalarFieldEnum | UserFavoriteBookScalarFieldEnum[]
  }

  /**
   * UserFavoriteBook findFirstOrThrow
   */
  export type UserFavoriteBookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteBook to fetch.
     */
    where?: UserFavoriteBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteBooks to fetch.
     */
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFavoriteBooks.
     */
    cursor?: UserFavoriteBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFavoriteBooks.
     */
    distinct?: UserFavoriteBookScalarFieldEnum | UserFavoriteBookScalarFieldEnum[]
  }

  /**
   * UserFavoriteBook findMany
   */
  export type UserFavoriteBookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteBooks to fetch.
     */
    where?: UserFavoriteBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteBooks to fetch.
     */
    orderBy?: UserFavoriteBookOrderByWithRelationInput | UserFavoriteBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFavoriteBooks.
     */
    cursor?: UserFavoriteBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteBooks.
     */
    skip?: number
    distinct?: UserFavoriteBookScalarFieldEnum | UserFavoriteBookScalarFieldEnum[]
  }

  /**
   * UserFavoriteBook create
   */
  export type UserFavoriteBookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFavoriteBook.
     */
    data: XOR<UserFavoriteBookCreateInput, UserFavoriteBookUncheckedCreateInput>
  }

  /**
   * UserFavoriteBook createMany
   */
  export type UserFavoriteBookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFavoriteBooks.
     */
    data: UserFavoriteBookCreateManyInput | UserFavoriteBookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserFavoriteBook update
   */
  export type UserFavoriteBookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFavoriteBook.
     */
    data: XOR<UserFavoriteBookUpdateInput, UserFavoriteBookUncheckedUpdateInput>
    /**
     * Choose, which UserFavoriteBook to update.
     */
    where: UserFavoriteBookWhereUniqueInput
  }

  /**
   * UserFavoriteBook updateMany
   */
  export type UserFavoriteBookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFavoriteBooks.
     */
    data: XOR<UserFavoriteBookUpdateManyMutationInput, UserFavoriteBookUncheckedUpdateManyInput>
    /**
     * Filter which UserFavoriteBooks to update
     */
    where?: UserFavoriteBookWhereInput
  }

  /**
   * UserFavoriteBook upsert
   */
  export type UserFavoriteBookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFavoriteBook to update in case it exists.
     */
    where: UserFavoriteBookWhereUniqueInput
    /**
     * In case the UserFavoriteBook found by the `where` argument doesn't exist, create a new UserFavoriteBook with this data.
     */
    create: XOR<UserFavoriteBookCreateInput, UserFavoriteBookUncheckedCreateInput>
    /**
     * In case the UserFavoriteBook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFavoriteBookUpdateInput, UserFavoriteBookUncheckedUpdateInput>
  }

  /**
   * UserFavoriteBook delete
   */
  export type UserFavoriteBookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
    /**
     * Filter which UserFavoriteBook to delete.
     */
    where: UserFavoriteBookWhereUniqueInput
  }

  /**
   * UserFavoriteBook deleteMany
   */
  export type UserFavoriteBookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFavoriteBooks to delete
     */
    where?: UserFavoriteBookWhereInput
  }

  /**
   * UserFavoriteBook without action
   */
  export type UserFavoriteBookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteBook
     */
    select?: UserFavoriteBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoriteBookInclude<ExtArgs> | null
  }


  /**
   * Model UserRateBook
   */

  export type AggregateUserRateBook = {
    _count: UserRateBookCountAggregateOutputType | null
    _avg: UserRateBookAvgAggregateOutputType | null
    _sum: UserRateBookSumAggregateOutputType | null
    _min: UserRateBookMinAggregateOutputType | null
    _max: UserRateBookMaxAggregateOutputType | null
  }

  export type UserRateBookAvgAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    bookId: number | null
  }

  export type UserRateBookSumAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    bookId: number | null
  }

  export type UserRateBookMinAggregateOutputType = {
    id: number | null
    score: number | null
    ratedAt: Date | null
    unratedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type UserRateBookMaxAggregateOutputType = {
    id: number | null
    score: number | null
    ratedAt: Date | null
    unratedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type UserRateBookCountAggregateOutputType = {
    id: number
    score: number
    ratedAt: number
    unratedAt: number
    userId: number
    bookId: number
    _all: number
  }


  export type UserRateBookAvgAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    bookId?: true
  }

  export type UserRateBookSumAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    bookId?: true
  }

  export type UserRateBookMinAggregateInputType = {
    id?: true
    score?: true
    ratedAt?: true
    unratedAt?: true
    userId?: true
    bookId?: true
  }

  export type UserRateBookMaxAggregateInputType = {
    id?: true
    score?: true
    ratedAt?: true
    unratedAt?: true
    userId?: true
    bookId?: true
  }

  export type UserRateBookCountAggregateInputType = {
    id?: true
    score?: true
    ratedAt?: true
    unratedAt?: true
    userId?: true
    bookId?: true
    _all?: true
  }

  export type UserRateBookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRateBook to aggregate.
     */
    where?: UserRateBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRateBooks to fetch.
     */
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRateBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRateBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRateBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRateBooks
    **/
    _count?: true | UserRateBookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRateBookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRateBookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRateBookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRateBookMaxAggregateInputType
  }

  export type GetUserRateBookAggregateType<T extends UserRateBookAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRateBook[P]>
      : GetScalarType<T[P], AggregateUserRateBook[P]>
  }




  export type UserRateBookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRateBookWhereInput
    orderBy?: UserRateBookOrderByWithAggregationInput | UserRateBookOrderByWithAggregationInput[]
    by: UserRateBookScalarFieldEnum[] | UserRateBookScalarFieldEnum
    having?: UserRateBookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRateBookCountAggregateInputType | true
    _avg?: UserRateBookAvgAggregateInputType
    _sum?: UserRateBookSumAggregateInputType
    _min?: UserRateBookMinAggregateInputType
    _max?: UserRateBookMaxAggregateInputType
  }

  export type UserRateBookGroupByOutputType = {
    id: number
    score: number
    ratedAt: Date
    unratedAt: Date | null
    userId: number
    bookId: number
    _count: UserRateBookCountAggregateOutputType | null
    _avg: UserRateBookAvgAggregateOutputType | null
    _sum: UserRateBookSumAggregateOutputType | null
    _min: UserRateBookMinAggregateOutputType | null
    _max: UserRateBookMaxAggregateOutputType | null
  }

  type GetUserRateBookGroupByPayload<T extends UserRateBookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRateBookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRateBookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRateBookGroupByOutputType[P]>
            : GetScalarType<T[P], UserRateBookGroupByOutputType[P]>
        }
      >
    >


  export type UserRateBookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    ratedAt?: boolean
    unratedAt?: boolean
    userId?: boolean
    bookId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRateBook"]>


  export type UserRateBookSelectScalar = {
    id?: boolean
    score?: boolean
    ratedAt?: boolean
    unratedAt?: boolean
    userId?: boolean
    bookId?: boolean
  }

  export type UserRateBookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }

  export type $UserRateBookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRateBook"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      ratedAt: Date
      unratedAt: Date | null
      userId: number
      bookId: number
    }, ExtArgs["result"]["userRateBook"]>
    composites: {}
  }

  type UserRateBookGetPayload<S extends boolean | null | undefined | UserRateBookDefaultArgs> = $Result.GetResult<Prisma.$UserRateBookPayload, S>

  type UserRateBookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRateBookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRateBookCountAggregateInputType | true
    }

  export interface UserRateBookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRateBook'], meta: { name: 'UserRateBook' } }
    /**
     * Find zero or one UserRateBook that matches the filter.
     * @param {UserRateBookFindUniqueArgs} args - Arguments to find a UserRateBook
     * @example
     * // Get one UserRateBook
     * const userRateBook = await prisma.userRateBook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRateBookFindUniqueArgs>(args: SelectSubset<T, UserRateBookFindUniqueArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRateBook that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRateBookFindUniqueOrThrowArgs} args - Arguments to find a UserRateBook
     * @example
     * // Get one UserRateBook
     * const userRateBook = await prisma.userRateBook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRateBookFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRateBookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRateBook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookFindFirstArgs} args - Arguments to find a UserRateBook
     * @example
     * // Get one UserRateBook
     * const userRateBook = await prisma.userRateBook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRateBookFindFirstArgs>(args?: SelectSubset<T, UserRateBookFindFirstArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRateBook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookFindFirstOrThrowArgs} args - Arguments to find a UserRateBook
     * @example
     * // Get one UserRateBook
     * const userRateBook = await prisma.userRateBook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRateBookFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRateBookFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRateBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRateBooks
     * const userRateBooks = await prisma.userRateBook.findMany()
     * 
     * // Get first 10 UserRateBooks
     * const userRateBooks = await prisma.userRateBook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRateBookWithIdOnly = await prisma.userRateBook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRateBookFindManyArgs>(args?: SelectSubset<T, UserRateBookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRateBook.
     * @param {UserRateBookCreateArgs} args - Arguments to create a UserRateBook.
     * @example
     * // Create one UserRateBook
     * const UserRateBook = await prisma.userRateBook.create({
     *   data: {
     *     // ... data to create a UserRateBook
     *   }
     * })
     * 
     */
    create<T extends UserRateBookCreateArgs>(args: SelectSubset<T, UserRateBookCreateArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRateBooks.
     * @param {UserRateBookCreateManyArgs} args - Arguments to create many UserRateBooks.
     * @example
     * // Create many UserRateBooks
     * const userRateBook = await prisma.userRateBook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRateBookCreateManyArgs>(args?: SelectSubset<T, UserRateBookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRateBook.
     * @param {UserRateBookDeleteArgs} args - Arguments to delete one UserRateBook.
     * @example
     * // Delete one UserRateBook
     * const UserRateBook = await prisma.userRateBook.delete({
     *   where: {
     *     // ... filter to delete one UserRateBook
     *   }
     * })
     * 
     */
    delete<T extends UserRateBookDeleteArgs>(args: SelectSubset<T, UserRateBookDeleteArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRateBook.
     * @param {UserRateBookUpdateArgs} args - Arguments to update one UserRateBook.
     * @example
     * // Update one UserRateBook
     * const userRateBook = await prisma.userRateBook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRateBookUpdateArgs>(args: SelectSubset<T, UserRateBookUpdateArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRateBooks.
     * @param {UserRateBookDeleteManyArgs} args - Arguments to filter UserRateBooks to delete.
     * @example
     * // Delete a few UserRateBooks
     * const { count } = await prisma.userRateBook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRateBookDeleteManyArgs>(args?: SelectSubset<T, UserRateBookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRateBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRateBooks
     * const userRateBook = await prisma.userRateBook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRateBookUpdateManyArgs>(args: SelectSubset<T, UserRateBookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRateBook.
     * @param {UserRateBookUpsertArgs} args - Arguments to update or create a UserRateBook.
     * @example
     * // Update or create a UserRateBook
     * const userRateBook = await prisma.userRateBook.upsert({
     *   create: {
     *     // ... data to create a UserRateBook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRateBook we want to update
     *   }
     * })
     */
    upsert<T extends UserRateBookUpsertArgs>(args: SelectSubset<T, UserRateBookUpsertArgs<ExtArgs>>): Prisma__UserRateBookClient<$Result.GetResult<Prisma.$UserRateBookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRateBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookCountArgs} args - Arguments to filter UserRateBooks to count.
     * @example
     * // Count the number of UserRateBooks
     * const count = await prisma.userRateBook.count({
     *   where: {
     *     // ... the filter for the UserRateBooks we want to count
     *   }
     * })
    **/
    count<T extends UserRateBookCountArgs>(
      args?: Subset<T, UserRateBookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRateBookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRateBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRateBookAggregateArgs>(args: Subset<T, UserRateBookAggregateArgs>): Prisma.PrismaPromise<GetUserRateBookAggregateType<T>>

    /**
     * Group by UserRateBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRateBookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRateBookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRateBookGroupByArgs['orderBy'] }
        : { orderBy?: UserRateBookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRateBookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRateBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRateBook model
   */
  readonly fields: UserRateBookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRateBook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRateBookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    book<T extends BookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookDefaultArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRateBook model
   */ 
  interface UserRateBookFieldRefs {
    readonly id: FieldRef<"UserRateBook", 'Int'>
    readonly score: FieldRef<"UserRateBook", 'Float'>
    readonly ratedAt: FieldRef<"UserRateBook", 'DateTime'>
    readonly unratedAt: FieldRef<"UserRateBook", 'DateTime'>
    readonly userId: FieldRef<"UserRateBook", 'Int'>
    readonly bookId: FieldRef<"UserRateBook", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserRateBook findUnique
   */
  export type UserRateBookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter, which UserRateBook to fetch.
     */
    where: UserRateBookWhereUniqueInput
  }

  /**
   * UserRateBook findUniqueOrThrow
   */
  export type UserRateBookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter, which UserRateBook to fetch.
     */
    where: UserRateBookWhereUniqueInput
  }

  /**
   * UserRateBook findFirst
   */
  export type UserRateBookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter, which UserRateBook to fetch.
     */
    where?: UserRateBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRateBooks to fetch.
     */
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRateBooks.
     */
    cursor?: UserRateBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRateBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRateBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRateBooks.
     */
    distinct?: UserRateBookScalarFieldEnum | UserRateBookScalarFieldEnum[]
  }

  /**
   * UserRateBook findFirstOrThrow
   */
  export type UserRateBookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter, which UserRateBook to fetch.
     */
    where?: UserRateBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRateBooks to fetch.
     */
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRateBooks.
     */
    cursor?: UserRateBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRateBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRateBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRateBooks.
     */
    distinct?: UserRateBookScalarFieldEnum | UserRateBookScalarFieldEnum[]
  }

  /**
   * UserRateBook findMany
   */
  export type UserRateBookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter, which UserRateBooks to fetch.
     */
    where?: UserRateBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRateBooks to fetch.
     */
    orderBy?: UserRateBookOrderByWithRelationInput | UserRateBookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRateBooks.
     */
    cursor?: UserRateBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRateBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRateBooks.
     */
    skip?: number
    distinct?: UserRateBookScalarFieldEnum | UserRateBookScalarFieldEnum[]
  }

  /**
   * UserRateBook create
   */
  export type UserRateBookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRateBook.
     */
    data: XOR<UserRateBookCreateInput, UserRateBookUncheckedCreateInput>
  }

  /**
   * UserRateBook createMany
   */
  export type UserRateBookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRateBooks.
     */
    data: UserRateBookCreateManyInput | UserRateBookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRateBook update
   */
  export type UserRateBookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRateBook.
     */
    data: XOR<UserRateBookUpdateInput, UserRateBookUncheckedUpdateInput>
    /**
     * Choose, which UserRateBook to update.
     */
    where: UserRateBookWhereUniqueInput
  }

  /**
   * UserRateBook updateMany
   */
  export type UserRateBookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRateBooks.
     */
    data: XOR<UserRateBookUpdateManyMutationInput, UserRateBookUncheckedUpdateManyInput>
    /**
     * Filter which UserRateBooks to update
     */
    where?: UserRateBookWhereInput
  }

  /**
   * UserRateBook upsert
   */
  export type UserRateBookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRateBook to update in case it exists.
     */
    where: UserRateBookWhereUniqueInput
    /**
     * In case the UserRateBook found by the `where` argument doesn't exist, create a new UserRateBook with this data.
     */
    create: XOR<UserRateBookCreateInput, UserRateBookUncheckedCreateInput>
    /**
     * In case the UserRateBook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRateBookUpdateInput, UserRateBookUncheckedUpdateInput>
  }

  /**
   * UserRateBook delete
   */
  export type UserRateBookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
    /**
     * Filter which UserRateBook to delete.
     */
    where: UserRateBookWhereUniqueInput
  }

  /**
   * UserRateBook deleteMany
   */
  export type UserRateBookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRateBooks to delete
     */
    where?: UserRateBookWhereInput
  }

  /**
   * UserRateBook without action
   */
  export type UserRateBookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRateBook
     */
    select?: UserRateBookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRateBookInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    bookId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    bookId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    bookId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    createdAt: number
    updatedAt: number
    userId: number
    bookId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    bookId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    bookId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    bookId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    text: string
    createdAt: Date
    updatedAt: Date
    userId: number
    bookId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    bookId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>


  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    bookId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      createdAt: Date
      updatedAt: Date
      userId: number
      bookId: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    book<T extends BookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookDefaultArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly userId: FieldRef<"Comment", 'Int'>
    readonly bookId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    displayName: 'displayName',
    firstName: 'firstName',
    lastName: 'lastName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    googleBooksId: 'googleBooksId',
    name: 'name',
    author: 'author',
    cover: 'cover',
    overview: 'overview',
    releasedDate: 'releasedDate',
    ratedAverage: 'ratedAverage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const UserFavoriteBookScalarFieldEnum: {
    id: 'id',
    likedAt: 'likedAt',
    unlikedAt: 'unlikedAt',
    userId: 'userId',
    bookId: 'bookId'
  };

  export type UserFavoriteBookScalarFieldEnum = (typeof UserFavoriteBookScalarFieldEnum)[keyof typeof UserFavoriteBookScalarFieldEnum]


  export const UserRateBookScalarFieldEnum: {
    id: 'id',
    score: 'score',
    ratedAt: 'ratedAt',
    unratedAt: 'unratedAt',
    userId: 'userId',
    bookId: 'bookId'
  };

  export type UserRateBookScalarFieldEnum = (typeof UserRateBookScalarFieldEnum)[keyof typeof UserRateBookScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    bookId: 'bookId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    favoriteBooks?: UserFavoriteBookListRelationFilter
    bookRatings?: UserRateBookListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favoriteBooks?: UserFavoriteBookOrderByRelationAggregateInput
    bookRatings?: UserRateBookOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    favoriteBooks?: UserFavoriteBookListRelationFilter
    bookRatings?: UserRateBookListRelationFilter
    comments?: CommentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BookWhereInput = {
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    id?: IntFilter<"Book"> | number
    googleBooksId?: StringNullableFilter<"Book"> | string | null
    name?: StringFilter<"Book"> | string
    author?: StringFilter<"Book"> | string
    cover?: BytesNullableFilter<"Book"> | Buffer | null
    overview?: StringNullableFilter<"Book"> | string | null
    releasedDate?: DateTimeNullableFilter<"Book"> | Date | string | null
    ratedAverage?: FloatNullableFilter<"Book"> | number | null
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    userFavorites?: UserFavoriteBookListRelationFilter
    userRatings?: UserRateBookListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    googleBooksId?: SortOrderInput | SortOrder
    name?: SortOrder
    author?: SortOrder
    cover?: SortOrderInput | SortOrder
    overview?: SortOrderInput | SortOrder
    releasedDate?: SortOrderInput | SortOrder
    ratedAverage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userFavorites?: UserFavoriteBookOrderByRelationAggregateInput
    userRatings?: UserRateBookOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type BookWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    googleBooksId?: string
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    name?: StringFilter<"Book"> | string
    author?: StringFilter<"Book"> | string
    cover?: BytesNullableFilter<"Book"> | Buffer | null
    overview?: StringNullableFilter<"Book"> | string | null
    releasedDate?: DateTimeNullableFilter<"Book"> | Date | string | null
    ratedAverage?: FloatNullableFilter<"Book"> | number | null
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    userFavorites?: UserFavoriteBookListRelationFilter
    userRatings?: UserRateBookListRelationFilter
    comments?: CommentListRelationFilter
  }, "id" | "googleBooksId">

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    googleBooksId?: SortOrderInput | SortOrder
    name?: SortOrder
    author?: SortOrder
    cover?: SortOrderInput | SortOrder
    overview?: SortOrderInput | SortOrder
    releasedDate?: SortOrderInput | SortOrder
    ratedAverage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    OR?: BookScalarWhereWithAggregatesInput[]
    NOT?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Book"> | number
    googleBooksId?: StringNullableWithAggregatesFilter<"Book"> | string | null
    name?: StringWithAggregatesFilter<"Book"> | string
    author?: StringWithAggregatesFilter<"Book"> | string
    cover?: BytesNullableWithAggregatesFilter<"Book"> | Buffer | null
    overview?: StringNullableWithAggregatesFilter<"Book"> | string | null
    releasedDate?: DateTimeNullableWithAggregatesFilter<"Book"> | Date | string | null
    ratedAverage?: FloatNullableWithAggregatesFilter<"Book"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
  }

  export type UserFavoriteBookWhereInput = {
    AND?: UserFavoriteBookWhereInput | UserFavoriteBookWhereInput[]
    OR?: UserFavoriteBookWhereInput[]
    NOT?: UserFavoriteBookWhereInput | UserFavoriteBookWhereInput[]
    id?: IntFilter<"UserFavoriteBook"> | number
    likedAt?: DateTimeFilter<"UserFavoriteBook"> | Date | string
    unlikedAt?: DateTimeNullableFilter<"UserFavoriteBook"> | Date | string | null
    userId?: IntFilter<"UserFavoriteBook"> | number
    bookId?: IntFilter<"UserFavoriteBook"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }

  export type UserFavoriteBookOrderByWithRelationInput = {
    id?: SortOrder
    likedAt?: SortOrder
    unlikedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    user?: UserOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
  }

  export type UserFavoriteBookWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserFavoriteBookWhereInput | UserFavoriteBookWhereInput[]
    OR?: UserFavoriteBookWhereInput[]
    NOT?: UserFavoriteBookWhereInput | UserFavoriteBookWhereInput[]
    likedAt?: DateTimeFilter<"UserFavoriteBook"> | Date | string
    unlikedAt?: DateTimeNullableFilter<"UserFavoriteBook"> | Date | string | null
    userId?: IntFilter<"UserFavoriteBook"> | number
    bookId?: IntFilter<"UserFavoriteBook"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }, "id">

  export type UserFavoriteBookOrderByWithAggregationInput = {
    id?: SortOrder
    likedAt?: SortOrder
    unlikedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    _count?: UserFavoriteBookCountOrderByAggregateInput
    _avg?: UserFavoriteBookAvgOrderByAggregateInput
    _max?: UserFavoriteBookMaxOrderByAggregateInput
    _min?: UserFavoriteBookMinOrderByAggregateInput
    _sum?: UserFavoriteBookSumOrderByAggregateInput
  }

  export type UserFavoriteBookScalarWhereWithAggregatesInput = {
    AND?: UserFavoriteBookScalarWhereWithAggregatesInput | UserFavoriteBookScalarWhereWithAggregatesInput[]
    OR?: UserFavoriteBookScalarWhereWithAggregatesInput[]
    NOT?: UserFavoriteBookScalarWhereWithAggregatesInput | UserFavoriteBookScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserFavoriteBook"> | number
    likedAt?: DateTimeWithAggregatesFilter<"UserFavoriteBook"> | Date | string
    unlikedAt?: DateTimeNullableWithAggregatesFilter<"UserFavoriteBook"> | Date | string | null
    userId?: IntWithAggregatesFilter<"UserFavoriteBook"> | number
    bookId?: IntWithAggregatesFilter<"UserFavoriteBook"> | number
  }

  export type UserRateBookWhereInput = {
    AND?: UserRateBookWhereInput | UserRateBookWhereInput[]
    OR?: UserRateBookWhereInput[]
    NOT?: UserRateBookWhereInput | UserRateBookWhereInput[]
    id?: IntFilter<"UserRateBook"> | number
    score?: FloatFilter<"UserRateBook"> | number
    ratedAt?: DateTimeFilter<"UserRateBook"> | Date | string
    unratedAt?: DateTimeNullableFilter<"UserRateBook"> | Date | string | null
    userId?: IntFilter<"UserRateBook"> | number
    bookId?: IntFilter<"UserRateBook"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }

  export type UserRateBookOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    ratedAt?: SortOrder
    unratedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    user?: UserOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
  }

  export type UserRateBookWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserRateBookWhereInput | UserRateBookWhereInput[]
    OR?: UserRateBookWhereInput[]
    NOT?: UserRateBookWhereInput | UserRateBookWhereInput[]
    score?: FloatFilter<"UserRateBook"> | number
    ratedAt?: DateTimeFilter<"UserRateBook"> | Date | string
    unratedAt?: DateTimeNullableFilter<"UserRateBook"> | Date | string | null
    userId?: IntFilter<"UserRateBook"> | number
    bookId?: IntFilter<"UserRateBook"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }, "id">

  export type UserRateBookOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    ratedAt?: SortOrder
    unratedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    _count?: UserRateBookCountOrderByAggregateInput
    _avg?: UserRateBookAvgOrderByAggregateInput
    _max?: UserRateBookMaxOrderByAggregateInput
    _min?: UserRateBookMinOrderByAggregateInput
    _sum?: UserRateBookSumOrderByAggregateInput
  }

  export type UserRateBookScalarWhereWithAggregatesInput = {
    AND?: UserRateBookScalarWhereWithAggregatesInput | UserRateBookScalarWhereWithAggregatesInput[]
    OR?: UserRateBookScalarWhereWithAggregatesInput[]
    NOT?: UserRateBookScalarWhereWithAggregatesInput | UserRateBookScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserRateBook"> | number
    score?: FloatWithAggregatesFilter<"UserRateBook"> | number
    ratedAt?: DateTimeWithAggregatesFilter<"UserRateBook"> | Date | string
    unratedAt?: DateTimeNullableWithAggregatesFilter<"UserRateBook"> | Date | string | null
    userId?: IntWithAggregatesFilter<"UserRateBook"> | number
    bookId?: IntWithAggregatesFilter<"UserRateBook"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    bookId?: IntFilter<"Comment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    user?: UserOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    bookId?: IntFilter<"Comment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    book?: XOR<BookRelationFilter, BookWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    text?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    userId?: IntWithAggregatesFilter<"Comment"> | number
    bookId?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookCreateNestedManyWithoutUserInput
    bookRatings?: UserRateBookCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookUncheckedCreateNestedManyWithoutUserInput
    bookRatings?: UserRateBookUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUpdateManyWithoutUserNestedInput
    bookRatings?: UserRateBookUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUncheckedUpdateManyWithoutUserNestedInput
    bookRatings?: UserRateBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateInput = {
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookCreateNestedManyWithoutBookInput
    userRatings?: UserRateBookCreateNestedManyWithoutBookInput
    comments?: CommentCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: number
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookUncheckedCreateNestedManyWithoutBookInput
    userRatings?: UserRateBookUncheckedCreateNestedManyWithoutBookInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookUpdateInput = {
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUpdateManyWithoutBookNestedInput
    userRatings?: UserRateBookUpdateManyWithoutBookNestedInput
    comments?: CommentUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUncheckedUpdateManyWithoutBookNestedInput
    userRatings?: UserRateBookUncheckedUpdateManyWithoutBookNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: number
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookUpdateManyMutationInput = {
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFavoriteBookCreateInput = {
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    user: UserCreateNestedOneWithoutFavoriteBooksInput
    book: BookCreateNestedOneWithoutUserFavoritesInput
  }

  export type UserFavoriteBookUncheckedCreateInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    userId: number
    bookId: number
  }

  export type UserFavoriteBookUpdateInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutFavoriteBooksNestedInput
    book?: BookUpdateOneRequiredWithoutUserFavoritesNestedInput
  }

  export type UserFavoriteBookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoriteBookCreateManyInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    userId: number
    bookId: number
  }

  export type UserFavoriteBookUpdateManyMutationInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserFavoriteBookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookCreateInput = {
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    user: UserCreateNestedOneWithoutBookRatingsInput
    book: BookCreateNestedOneWithoutUserRatingsInput
  }

  export type UserRateBookUncheckedCreateInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    userId: number
    bookId: number
  }

  export type UserRateBookUpdateInput = {
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBookRatingsNestedInput
    book?: BookUpdateOneRequiredWithoutUserRatingsNestedInput
  }

  export type UserRateBookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookCreateManyInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    userId: number
    bookId: number
  }

  export type UserRateBookUpdateManyMutationInput = {
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserRateBookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    book: BookCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    bookId: number
  }

  export type CommentUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    book?: BookUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    bookId: number
  }

  export type CommentUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserFavoriteBookListRelationFilter = {
    every?: UserFavoriteBookWhereInput
    some?: UserFavoriteBookWhereInput
    none?: UserFavoriteBookWhereInput
  }

  export type UserRateBookListRelationFilter = {
    every?: UserRateBookWhereInput
    some?: UserRateBookWhereInput
    none?: UserRateBookWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserFavoriteBookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRateBookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    googleBooksId?: SortOrder
    name?: SortOrder
    author?: SortOrder
    cover?: SortOrder
    overview?: SortOrder
    releasedDate?: SortOrder
    ratedAverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    id?: SortOrder
    ratedAverage?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    googleBooksId?: SortOrder
    name?: SortOrder
    author?: SortOrder
    cover?: SortOrder
    overview?: SortOrder
    releasedDate?: SortOrder
    ratedAverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    googleBooksId?: SortOrder
    name?: SortOrder
    author?: SortOrder
    cover?: SortOrder
    overview?: SortOrder
    releasedDate?: SortOrder
    ratedAverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    id?: SortOrder
    ratedAverage?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BookRelationFilter = {
    is?: BookWhereInput
    isNot?: BookWhereInput
  }

  export type UserFavoriteBookCountOrderByAggregateInput = {
    id?: SortOrder
    likedAt?: SortOrder
    unlikedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserFavoriteBookAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserFavoriteBookMaxOrderByAggregateInput = {
    id?: SortOrder
    likedAt?: SortOrder
    unlikedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserFavoriteBookMinOrderByAggregateInput = {
    id?: SortOrder
    likedAt?: SortOrder
    unlikedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserFavoriteBookSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRateBookCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    ratedAt?: SortOrder
    unratedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserRateBookAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserRateBookMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    ratedAt?: SortOrder
    unratedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserRateBookMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    ratedAt?: SortOrder
    unratedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserRateBookSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type UserFavoriteBookCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput> | UserFavoriteBookCreateWithoutUserInput[] | UserFavoriteBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutUserInput | UserFavoriteBookCreateOrConnectWithoutUserInput[]
    createMany?: UserFavoriteBookCreateManyUserInputEnvelope
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
  }

  export type UserRateBookCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput> | UserRateBookCreateWithoutUserInput[] | UserRateBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutUserInput | UserRateBookCreateOrConnectWithoutUserInput[]
    createMany?: UserRateBookCreateManyUserInputEnvelope
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserFavoriteBookUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput> | UserFavoriteBookCreateWithoutUserInput[] | UserFavoriteBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutUserInput | UserFavoriteBookCreateOrConnectWithoutUserInput[]
    createMany?: UserFavoriteBookCreateManyUserInputEnvelope
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
  }

  export type UserRateBookUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput> | UserRateBookCreateWithoutUserInput[] | UserRateBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutUserInput | UserRateBookCreateOrConnectWithoutUserInput[]
    createMany?: UserRateBookCreateManyUserInputEnvelope
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserFavoriteBookUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput> | UserFavoriteBookCreateWithoutUserInput[] | UserFavoriteBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutUserInput | UserFavoriteBookCreateOrConnectWithoutUserInput[]
    upsert?: UserFavoriteBookUpsertWithWhereUniqueWithoutUserInput | UserFavoriteBookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFavoriteBookCreateManyUserInputEnvelope
    set?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    disconnect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    delete?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    update?: UserFavoriteBookUpdateWithWhereUniqueWithoutUserInput | UserFavoriteBookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFavoriteBookUpdateManyWithWhereWithoutUserInput | UserFavoriteBookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
  }

  export type UserRateBookUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput> | UserRateBookCreateWithoutUserInput[] | UserRateBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutUserInput | UserRateBookCreateOrConnectWithoutUserInput[]
    upsert?: UserRateBookUpsertWithWhereUniqueWithoutUserInput | UserRateBookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRateBookCreateManyUserInputEnvelope
    set?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    disconnect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    delete?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    update?: UserRateBookUpdateWithWhereUniqueWithoutUserInput | UserRateBookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRateBookUpdateManyWithWhereWithoutUserInput | UserRateBookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserFavoriteBookUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput> | UserFavoriteBookCreateWithoutUserInput[] | UserFavoriteBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutUserInput | UserFavoriteBookCreateOrConnectWithoutUserInput[]
    upsert?: UserFavoriteBookUpsertWithWhereUniqueWithoutUserInput | UserFavoriteBookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFavoriteBookCreateManyUserInputEnvelope
    set?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    disconnect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    delete?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    update?: UserFavoriteBookUpdateWithWhereUniqueWithoutUserInput | UserFavoriteBookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFavoriteBookUpdateManyWithWhereWithoutUserInput | UserFavoriteBookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
  }

  export type UserRateBookUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput> | UserRateBookCreateWithoutUserInput[] | UserRateBookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutUserInput | UserRateBookCreateOrConnectWithoutUserInput[]
    upsert?: UserRateBookUpsertWithWhereUniqueWithoutUserInput | UserRateBookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRateBookCreateManyUserInputEnvelope
    set?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    disconnect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    delete?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    update?: UserRateBookUpdateWithWhereUniqueWithoutUserInput | UserRateBookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRateBookUpdateManyWithWhereWithoutUserInput | UserRateBookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserFavoriteBookCreateNestedManyWithoutBookInput = {
    create?: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput> | UserFavoriteBookCreateWithoutBookInput[] | UserFavoriteBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutBookInput | UserFavoriteBookCreateOrConnectWithoutBookInput[]
    createMany?: UserFavoriteBookCreateManyBookInputEnvelope
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
  }

  export type UserRateBookCreateNestedManyWithoutBookInput = {
    create?: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput> | UserRateBookCreateWithoutBookInput[] | UserRateBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutBookInput | UserRateBookCreateOrConnectWithoutBookInput[]
    createMany?: UserRateBookCreateManyBookInputEnvelope
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutBookInput = {
    create?: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput> | CommentCreateWithoutBookInput[] | CommentUncheckedCreateWithoutBookInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookInput | CommentCreateOrConnectWithoutBookInput[]
    createMany?: CommentCreateManyBookInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserFavoriteBookUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput> | UserFavoriteBookCreateWithoutBookInput[] | UserFavoriteBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutBookInput | UserFavoriteBookCreateOrConnectWithoutBookInput[]
    createMany?: UserFavoriteBookCreateManyBookInputEnvelope
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
  }

  export type UserRateBookUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput> | UserRateBookCreateWithoutBookInput[] | UserRateBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutBookInput | UserRateBookCreateOrConnectWithoutBookInput[]
    createMany?: UserRateBookCreateManyBookInputEnvelope
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput> | CommentCreateWithoutBookInput[] | CommentUncheckedCreateWithoutBookInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookInput | CommentCreateOrConnectWithoutBookInput[]
    createMany?: CommentCreateManyBookInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserFavoriteBookUpdateManyWithoutBookNestedInput = {
    create?: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput> | UserFavoriteBookCreateWithoutBookInput[] | UserFavoriteBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutBookInput | UserFavoriteBookCreateOrConnectWithoutBookInput[]
    upsert?: UserFavoriteBookUpsertWithWhereUniqueWithoutBookInput | UserFavoriteBookUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: UserFavoriteBookCreateManyBookInputEnvelope
    set?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    disconnect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    delete?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    update?: UserFavoriteBookUpdateWithWhereUniqueWithoutBookInput | UserFavoriteBookUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: UserFavoriteBookUpdateManyWithWhereWithoutBookInput | UserFavoriteBookUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
  }

  export type UserRateBookUpdateManyWithoutBookNestedInput = {
    create?: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput> | UserRateBookCreateWithoutBookInput[] | UserRateBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutBookInput | UserRateBookCreateOrConnectWithoutBookInput[]
    upsert?: UserRateBookUpsertWithWhereUniqueWithoutBookInput | UserRateBookUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: UserRateBookCreateManyBookInputEnvelope
    set?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    disconnect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    delete?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    update?: UserRateBookUpdateWithWhereUniqueWithoutBookInput | UserRateBookUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: UserRateBookUpdateManyWithWhereWithoutBookInput | UserRateBookUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutBookNestedInput = {
    create?: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput> | CommentCreateWithoutBookInput[] | CommentUncheckedCreateWithoutBookInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookInput | CommentCreateOrConnectWithoutBookInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBookInput | CommentUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: CommentCreateManyBookInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBookInput | CommentUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBookInput | CommentUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserFavoriteBookUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput> | UserFavoriteBookCreateWithoutBookInput[] | UserFavoriteBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserFavoriteBookCreateOrConnectWithoutBookInput | UserFavoriteBookCreateOrConnectWithoutBookInput[]
    upsert?: UserFavoriteBookUpsertWithWhereUniqueWithoutBookInput | UserFavoriteBookUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: UserFavoriteBookCreateManyBookInputEnvelope
    set?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    disconnect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    delete?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    connect?: UserFavoriteBookWhereUniqueInput | UserFavoriteBookWhereUniqueInput[]
    update?: UserFavoriteBookUpdateWithWhereUniqueWithoutBookInput | UserFavoriteBookUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: UserFavoriteBookUpdateManyWithWhereWithoutBookInput | UserFavoriteBookUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
  }

  export type UserRateBookUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput> | UserRateBookCreateWithoutBookInput[] | UserRateBookUncheckedCreateWithoutBookInput[]
    connectOrCreate?: UserRateBookCreateOrConnectWithoutBookInput | UserRateBookCreateOrConnectWithoutBookInput[]
    upsert?: UserRateBookUpsertWithWhereUniqueWithoutBookInput | UserRateBookUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: UserRateBookCreateManyBookInputEnvelope
    set?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    disconnect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    delete?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    connect?: UserRateBookWhereUniqueInput | UserRateBookWhereUniqueInput[]
    update?: UserRateBookUpdateWithWhereUniqueWithoutBookInput | UserRateBookUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: UserRateBookUpdateManyWithWhereWithoutBookInput | UserRateBookUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput> | CommentCreateWithoutBookInput[] | CommentUncheckedCreateWithoutBookInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookInput | CommentCreateOrConnectWithoutBookInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBookInput | CommentUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: CommentCreateManyBookInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBookInput | CommentUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBookInput | CommentUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFavoriteBooksInput = {
    create?: XOR<UserCreateWithoutFavoriteBooksInput, UserUncheckedCreateWithoutFavoriteBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteBooksInput
    connect?: UserWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutUserFavoritesInput = {
    create?: XOR<BookCreateWithoutUserFavoritesInput, BookUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: BookCreateOrConnectWithoutUserFavoritesInput
    connect?: BookWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteBooksNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteBooksInput, UserUncheckedCreateWithoutFavoriteBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteBooksInput
    upsert?: UserUpsertWithoutFavoriteBooksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteBooksInput, UserUpdateWithoutFavoriteBooksInput>, UserUncheckedUpdateWithoutFavoriteBooksInput>
  }

  export type BookUpdateOneRequiredWithoutUserFavoritesNestedInput = {
    create?: XOR<BookCreateWithoutUserFavoritesInput, BookUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: BookCreateOrConnectWithoutUserFavoritesInput
    upsert?: BookUpsertWithoutUserFavoritesInput
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutUserFavoritesInput, BookUpdateWithoutUserFavoritesInput>, BookUncheckedUpdateWithoutUserFavoritesInput>
  }

  export type UserCreateNestedOneWithoutBookRatingsInput = {
    create?: XOR<UserCreateWithoutBookRatingsInput, UserUncheckedCreateWithoutBookRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutUserRatingsInput = {
    create?: XOR<BookCreateWithoutUserRatingsInput, BookUncheckedCreateWithoutUserRatingsInput>
    connectOrCreate?: BookCreateOrConnectWithoutUserRatingsInput
    connect?: BookWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBookRatingsNestedInput = {
    create?: XOR<UserCreateWithoutBookRatingsInput, UserUncheckedCreateWithoutBookRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookRatingsInput
    upsert?: UserUpsertWithoutBookRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookRatingsInput, UserUpdateWithoutBookRatingsInput>, UserUncheckedUpdateWithoutBookRatingsInput>
  }

  export type BookUpdateOneRequiredWithoutUserRatingsNestedInput = {
    create?: XOR<BookCreateWithoutUserRatingsInput, BookUncheckedCreateWithoutUserRatingsInput>
    connectOrCreate?: BookCreateOrConnectWithoutUserRatingsInput
    upsert?: BookUpsertWithoutUserRatingsInput
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutUserRatingsInput, BookUpdateWithoutUserRatingsInput>, BookUncheckedUpdateWithoutUserRatingsInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutCommentsInput = {
    create?: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookCreateOrConnectWithoutCommentsInput
    connect?: BookWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type BookUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookCreateOrConnectWithoutCommentsInput
    upsert?: BookUpsertWithoutCommentsInput
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutCommentsInput, BookUpdateWithoutCommentsInput>, BookUncheckedUpdateWithoutCommentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserFavoriteBookCreateWithoutUserInput = {
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    book: BookCreateNestedOneWithoutUserFavoritesInput
  }

  export type UserFavoriteBookUncheckedCreateWithoutUserInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    bookId: number
  }

  export type UserFavoriteBookCreateOrConnectWithoutUserInput = {
    where: UserFavoriteBookWhereUniqueInput
    create: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput>
  }

  export type UserFavoriteBookCreateManyUserInputEnvelope = {
    data: UserFavoriteBookCreateManyUserInput | UserFavoriteBookCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRateBookCreateWithoutUserInput = {
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    book: BookCreateNestedOneWithoutUserRatingsInput
  }

  export type UserRateBookUncheckedCreateWithoutUserInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    bookId: number
  }

  export type UserRateBookCreateOrConnectWithoutUserInput = {
    where: UserRateBookWhereUniqueInput
    create: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput>
  }

  export type UserRateBookCreateManyUserInputEnvelope = {
    data: UserRateBookCreateManyUserInput | UserRateBookCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    book: BookCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookId: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFavoriteBookUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFavoriteBookWhereUniqueInput
    update: XOR<UserFavoriteBookUpdateWithoutUserInput, UserFavoriteBookUncheckedUpdateWithoutUserInput>
    create: XOR<UserFavoriteBookCreateWithoutUserInput, UserFavoriteBookUncheckedCreateWithoutUserInput>
  }

  export type UserFavoriteBookUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFavoriteBookWhereUniqueInput
    data: XOR<UserFavoriteBookUpdateWithoutUserInput, UserFavoriteBookUncheckedUpdateWithoutUserInput>
  }

  export type UserFavoriteBookUpdateManyWithWhereWithoutUserInput = {
    where: UserFavoriteBookScalarWhereInput
    data: XOR<UserFavoriteBookUpdateManyMutationInput, UserFavoriteBookUncheckedUpdateManyWithoutUserInput>
  }

  export type UserFavoriteBookScalarWhereInput = {
    AND?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
    OR?: UserFavoriteBookScalarWhereInput[]
    NOT?: UserFavoriteBookScalarWhereInput | UserFavoriteBookScalarWhereInput[]
    id?: IntFilter<"UserFavoriteBook"> | number
    likedAt?: DateTimeFilter<"UserFavoriteBook"> | Date | string
    unlikedAt?: DateTimeNullableFilter<"UserFavoriteBook"> | Date | string | null
    userId?: IntFilter<"UserFavoriteBook"> | number
    bookId?: IntFilter<"UserFavoriteBook"> | number
  }

  export type UserRateBookUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRateBookWhereUniqueInput
    update: XOR<UserRateBookUpdateWithoutUserInput, UserRateBookUncheckedUpdateWithoutUserInput>
    create: XOR<UserRateBookCreateWithoutUserInput, UserRateBookUncheckedCreateWithoutUserInput>
  }

  export type UserRateBookUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRateBookWhereUniqueInput
    data: XOR<UserRateBookUpdateWithoutUserInput, UserRateBookUncheckedUpdateWithoutUserInput>
  }

  export type UserRateBookUpdateManyWithWhereWithoutUserInput = {
    where: UserRateBookScalarWhereInput
    data: XOR<UserRateBookUpdateManyMutationInput, UserRateBookUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRateBookScalarWhereInput = {
    AND?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
    OR?: UserRateBookScalarWhereInput[]
    NOT?: UserRateBookScalarWhereInput | UserRateBookScalarWhereInput[]
    id?: IntFilter<"UserRateBook"> | number
    score?: FloatFilter<"UserRateBook"> | number
    ratedAt?: DateTimeFilter<"UserRateBook"> | Date | string
    unratedAt?: DateTimeNullableFilter<"UserRateBook"> | Date | string | null
    userId?: IntFilter<"UserRateBook"> | number
    bookId?: IntFilter<"UserRateBook"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: IntFilter<"Comment"> | number
    bookId?: IntFilter<"Comment"> | number
  }

  export type UserFavoriteBookCreateWithoutBookInput = {
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    user: UserCreateNestedOneWithoutFavoriteBooksInput
  }

  export type UserFavoriteBookUncheckedCreateWithoutBookInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    userId: number
  }

  export type UserFavoriteBookCreateOrConnectWithoutBookInput = {
    where: UserFavoriteBookWhereUniqueInput
    create: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput>
  }

  export type UserFavoriteBookCreateManyBookInputEnvelope = {
    data: UserFavoriteBookCreateManyBookInput | UserFavoriteBookCreateManyBookInput[]
    skipDuplicates?: boolean
  }

  export type UserRateBookCreateWithoutBookInput = {
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    user: UserCreateNestedOneWithoutBookRatingsInput
  }

  export type UserRateBookUncheckedCreateWithoutBookInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    userId: number
  }

  export type UserRateBookCreateOrConnectWithoutBookInput = {
    where: UserRateBookWhereUniqueInput
    create: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput>
  }

  export type UserRateBookCreateManyBookInputEnvelope = {
    data: UserRateBookCreateManyBookInput | UserRateBookCreateManyBookInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutBookInput = {
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutBookInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type CommentCreateOrConnectWithoutBookInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput>
  }

  export type CommentCreateManyBookInputEnvelope = {
    data: CommentCreateManyBookInput | CommentCreateManyBookInput[]
    skipDuplicates?: boolean
  }

  export type UserFavoriteBookUpsertWithWhereUniqueWithoutBookInput = {
    where: UserFavoriteBookWhereUniqueInput
    update: XOR<UserFavoriteBookUpdateWithoutBookInput, UserFavoriteBookUncheckedUpdateWithoutBookInput>
    create: XOR<UserFavoriteBookCreateWithoutBookInput, UserFavoriteBookUncheckedCreateWithoutBookInput>
  }

  export type UserFavoriteBookUpdateWithWhereUniqueWithoutBookInput = {
    where: UserFavoriteBookWhereUniqueInput
    data: XOR<UserFavoriteBookUpdateWithoutBookInput, UserFavoriteBookUncheckedUpdateWithoutBookInput>
  }

  export type UserFavoriteBookUpdateManyWithWhereWithoutBookInput = {
    where: UserFavoriteBookScalarWhereInput
    data: XOR<UserFavoriteBookUpdateManyMutationInput, UserFavoriteBookUncheckedUpdateManyWithoutBookInput>
  }

  export type UserRateBookUpsertWithWhereUniqueWithoutBookInput = {
    where: UserRateBookWhereUniqueInput
    update: XOR<UserRateBookUpdateWithoutBookInput, UserRateBookUncheckedUpdateWithoutBookInput>
    create: XOR<UserRateBookCreateWithoutBookInput, UserRateBookUncheckedCreateWithoutBookInput>
  }

  export type UserRateBookUpdateWithWhereUniqueWithoutBookInput = {
    where: UserRateBookWhereUniqueInput
    data: XOR<UserRateBookUpdateWithoutBookInput, UserRateBookUncheckedUpdateWithoutBookInput>
  }

  export type UserRateBookUpdateManyWithWhereWithoutBookInput = {
    where: UserRateBookScalarWhereInput
    data: XOR<UserRateBookUpdateManyMutationInput, UserRateBookUncheckedUpdateManyWithoutBookInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutBookInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutBookInput, CommentUncheckedUpdateWithoutBookInput>
    create: XOR<CommentCreateWithoutBookInput, CommentUncheckedCreateWithoutBookInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutBookInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutBookInput, CommentUncheckedUpdateWithoutBookInput>
  }

  export type CommentUpdateManyWithWhereWithoutBookInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutBookInput>
  }

  export type UserCreateWithoutFavoriteBooksInput = {
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookRatings?: UserRateBookCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteBooksInput = {
    id?: number
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookRatings?: UserRateBookUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteBooksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteBooksInput, UserUncheckedCreateWithoutFavoriteBooksInput>
  }

  export type BookCreateWithoutUserFavoritesInput = {
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRatings?: UserRateBookCreateNestedManyWithoutBookInput
    comments?: CommentCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutUserFavoritesInput = {
    id?: number
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRatings?: UserRateBookUncheckedCreateNestedManyWithoutBookInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutUserFavoritesInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutUserFavoritesInput, BookUncheckedCreateWithoutUserFavoritesInput>
  }

  export type UserUpsertWithoutFavoriteBooksInput = {
    update: XOR<UserUpdateWithoutFavoriteBooksInput, UserUncheckedUpdateWithoutFavoriteBooksInput>
    create: XOR<UserCreateWithoutFavoriteBooksInput, UserUncheckedCreateWithoutFavoriteBooksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteBooksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteBooksInput, UserUncheckedUpdateWithoutFavoriteBooksInput>
  }

  export type UserUpdateWithoutFavoriteBooksInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookRatings?: UserRateBookUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookRatings?: UserRateBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookUpsertWithoutUserFavoritesInput = {
    update: XOR<BookUpdateWithoutUserFavoritesInput, BookUncheckedUpdateWithoutUserFavoritesInput>
    create: XOR<BookCreateWithoutUserFavoritesInput, BookUncheckedCreateWithoutUserFavoritesInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutUserFavoritesInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutUserFavoritesInput, BookUncheckedUpdateWithoutUserFavoritesInput>
  }

  export type BookUpdateWithoutUserFavoritesInput = {
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRatings?: UserRateBookUpdateManyWithoutBookNestedInput
    comments?: CommentUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutUserFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRatings?: UserRateBookUncheckedUpdateManyWithoutBookNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserCreateWithoutBookRatingsInput = {
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookRatingsInput = {
    id?: number
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookRatingsInput, UserUncheckedCreateWithoutBookRatingsInput>
  }

  export type BookCreateWithoutUserRatingsInput = {
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookCreateNestedManyWithoutBookInput
    comments?: CommentCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutUserRatingsInput = {
    id?: number
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookUncheckedCreateNestedManyWithoutBookInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutUserRatingsInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutUserRatingsInput, BookUncheckedCreateWithoutUserRatingsInput>
  }

  export type UserUpsertWithoutBookRatingsInput = {
    update: XOR<UserUpdateWithoutBookRatingsInput, UserUncheckedUpdateWithoutBookRatingsInput>
    create: XOR<UserCreateWithoutBookRatingsInput, UserUncheckedCreateWithoutBookRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookRatingsInput, UserUncheckedUpdateWithoutBookRatingsInput>
  }

  export type UserUpdateWithoutBookRatingsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookUpsertWithoutUserRatingsInput = {
    update: XOR<BookUpdateWithoutUserRatingsInput, BookUncheckedUpdateWithoutUserRatingsInput>
    create: XOR<BookCreateWithoutUserRatingsInput, BookUncheckedCreateWithoutUserRatingsInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutUserRatingsInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutUserRatingsInput, BookUncheckedUpdateWithoutUserRatingsInput>
  }

  export type BookUpdateWithoutUserRatingsInput = {
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUpdateManyWithoutBookNestedInput
    comments?: CommentUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutUserRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUncheckedUpdateManyWithoutBookNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookCreateNestedManyWithoutUserInput
    bookRatings?: UserRateBookCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    email: string
    password: string
    displayName: string
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteBooks?: UserFavoriteBookUncheckedCreateNestedManyWithoutUserInput
    bookRatings?: UserRateBookUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type BookCreateWithoutCommentsInput = {
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookCreateNestedManyWithoutBookInput
    userRatings?: UserRateBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutCommentsInput = {
    id?: number
    googleBooksId?: string | null
    name: string
    author: string
    cover?: Buffer | null
    overview?: string | null
    releasedDate?: Date | string | null
    ratedAverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userFavorites?: UserFavoriteBookUncheckedCreateNestedManyWithoutBookInput
    userRatings?: UserRateBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutCommentsInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUpdateManyWithoutUserNestedInput
    bookRatings?: UserRateBookUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteBooks?: UserFavoriteBookUncheckedUpdateManyWithoutUserNestedInput
    bookRatings?: UserRateBookUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookUpsertWithoutCommentsInput = {
    update: XOR<BookUpdateWithoutCommentsInput, BookUncheckedUpdateWithoutCommentsInput>
    create: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutCommentsInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutCommentsInput, BookUncheckedUpdateWithoutCommentsInput>
  }

  export type BookUpdateWithoutCommentsInput = {
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUpdateManyWithoutBookNestedInput
    userRatings?: UserRateBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    googleBooksId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    cover?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    releasedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ratedAverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userFavorites?: UserFavoriteBookUncheckedUpdateManyWithoutBookNestedInput
    userRatings?: UserRateBookUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserFavoriteBookCreateManyUserInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    bookId: number
  }

  export type UserRateBookCreateManyUserInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    bookId: number
  }

  export type CommentCreateManyUserInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookId: number
  }

  export type UserFavoriteBookUpdateWithoutUserInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    book?: BookUpdateOneRequiredWithoutUserFavoritesNestedInput
  }

  export type UserFavoriteBookUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoriteBookUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookUpdateWithoutUserInput = {
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    book?: BookUpdateOneRequiredWithoutUserRatingsNestedInput
  }

  export type UserRateBookUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    book?: BookUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoriteBookCreateManyBookInput = {
    id?: number
    likedAt?: Date | string
    unlikedAt?: Date | string | null
    userId: number
  }

  export type UserRateBookCreateManyBookInput = {
    id?: number
    score: number
    ratedAt?: Date | string
    unratedAt?: Date | string | null
    userId: number
  }

  export type CommentCreateManyBookInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type UserFavoriteBookUpdateWithoutBookInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutFavoriteBooksNestedInput
  }

  export type UserFavoriteBookUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoriteBookUncheckedUpdateManyWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unlikedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookUpdateWithoutBookInput = {
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBookRatingsNestedInput
  }

  export type UserRateBookUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRateBookUncheckedUpdateManyWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    ratedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutBookInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookCountOutputTypeDefaultArgs instead
     */
    export type BookCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookDefaultArgs instead
     */
    export type BookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserFavoriteBookDefaultArgs instead
     */
    export type UserFavoriteBookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserFavoriteBookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRateBookDefaultArgs instead
     */
    export type UserRateBookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRateBookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}