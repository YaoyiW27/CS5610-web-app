generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement()) @map("user_id")
  email           String    @unique @map("user_email") @db.VarChar(255)
  password        String    @map("user_password") @db.VarChar(255)
  displayName     String    @map("user_display_name") @db.VarChar(255)
  firstName       String?   @map("user_first_name") @db.VarChar(255)
  lastName        String?   @map("user_last_name") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("user_created_at")
  updatedAt       DateTime  @updatedAt @map("user_updated_at")
  favoriteBooks   UserFavoriteBook[]
  bookRatings     UserRateBook[]
  reviews         Review[]

  @@map("users")
}

model Book {
  id            Int       @id @default(autoincrement()) @map("book_id")
  googleBooksId String?   @unique @map("google_books_id")
  name          String    @map("book_name") @db.VarChar(255)
  author        String    @map("book_author") @db.VarChar(255)
  cover         String?   @map("book_cover") @db.Text 
  description   String?   @map("book_overview") @db.Text
  releasedDate  DateTime? @map("book_released_date") @db.Date
  ratedAverage  Float?    @map("book_rated_average") @db.Double
  createdAt     DateTime  @default(now()) @map("book_created_at")
  updatedAt     DateTime  @updatedAt @map("book_updated_at")
  userFavorites UserFavoriteBook[]
  userRatings   UserRateBook[]
  reviews       Review[]

  @@map("books")
}

model UserFavoriteBook {
  id        Int       @id @default(autoincrement()) @map("like_id")
  likedAt   DateTime  @default(now()) @map("liked_at")
  userId    Int       @map("user_id")
  bookId    Int       @map("book_id")
  user      User      @relation(fields: [userId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])

  @@map("users_favorite_books")
}

model UserRateBook {
  id         Int       @id @default(autoincrement()) @map("rate_id")
  score      Float     @map("rated_score") @db.Double
  ratedAt    DateTime  @default(now()) @map("rated_at")
  updatedAt  DateTime? @map("updated_at")
  userId     Int       @map("user_id")
  bookId     Int       @map("book_id")
  user       User      @relation(fields: [userId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])

  @@map("users_rate_books")
}

model Review {
  id        Int      @id @default(autoincrement()) @map("review_id")
  text      String   @map("review_text") @db.Text
  createdAt DateTime @default(now()) @map("review_created_at")
  updatedAt DateTime? @map("review_updated_at")
  userId    Int      @map("user_id")
  bookId    Int      @map("book_id")
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@map("reviews")
}